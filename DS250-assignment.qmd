---
title: "Client Report - Can You Predict That?"
subtitle: "Course DS 250"
author: "Scott Townsend"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn import tree 
from sklearn.metrics import RocCurveDisplay
from sklearn import metrics
import io
import requests
```


## Elevator pitch

In this project, we analyze the relationship between home variables and whether a home was built before 1980. We create predictive models to classify homes based on their construction date, achieving high accuracy. Key insights include the importance of living area, number of bathrooms, and other features in predicting the construction period, aiding machine learning algorithms in accurate classification.

```{python}
#| label: project-data
#| code-summary: Get_data

dwellings_ml_url = "https://github.com/byuidatascience/data4dwellings/raw/master/data-raw/dwellings_ml/dwellings_ml.csv"

response = requests.get(dwellings_ml_url)

if response.status_code == 200:
    dwellings_ml = pd.read_csv(io.StringIO(response.text))
    print("CSV data loaded successfully into DataFrame!")
else:
    print(f"Failed to retrieve CSV data (status code: {response.status_code})")

```

## QUESTION|TASK 1

__Create 2-3 charts that evaluate potential relationships between the home variables and before1980. Explain what you learn from the charts that could help a machine learning algorithm.__

```{python}
#| label: Q1
#| code-summary: Read and format data
# Include and execute your code here

h_subset = dwellings_ml.filter(items=['livearea', 'numbaths', 'before1980'])

chart1 = px.scatter(h_subset,
  x='livearea', 
  y='numbaths', 
  color='before1980',
  labels={
    "livearea": "Living Area (sq ft)",
    "numbaths": "Number of Bathrooms",
    "before1980": "Built Before 1980"
    },
  title="Relationship between Living Area and Number of Bathrooms")

chart1.show()
```

The scatter plot shows the relationship between living area and the number of bathrooms, colored by whether the house was built before 1980. We can observe trends that could help the machine learning algorithm distinguish between houses built before and after 1980 based on these features

```{python}
#| label: Q1-2
#| code-summary: Read and format data
# Include and execute your code here

h_subset2 = dwellings_ml.filter(items=['basement', 'finbsmnt', 'before1980'])

chart2 = px.scatter(h_subset2,
  x='basement', 
  y='finbsmnt', 
  color='before1980',
  labels={
    "basement": "Basement",
    "finbsmnt": "Finished Basement (sq ft)",
    "before1980": "Built Before 1980"
    },
  title="Relationship between Basement and Finished Basement")

chart2.show()
```

This scatter plot reveals the relationship between the number of bedrooms and the number of stories, with the data colored by construction period. This information could be valuable in building a predictive model

```{python}
#| label: Q1-3
#| code-summary: Read and format data
# Include and execute your code here

h_subset3 = dwellings_ml.filter(items=['gartype_Att', 'finbsmnt', 'before1980'])

chart3 = px.scatter(h_subset3,
  x='gartype_Att', 
  y='finbsmnt', 
  color='before1980',
  labels={
    "gartype_Att": "Attached Garage",
    "finbsmnt": "Finished Basement (sq ft)",
    "before1980": "Built Before 1980"
    },
  title="Relationship between Attached Garage and Finished Basement")

chart3.show()
```



```{python}
#| label: Q1-4

numeric_cols = dwellings_ml.select_dtypes(include=[np.number])

corr = numeric_cols.corr()

fig = px.imshow(corr, text_auto=True, title="Correlation Heatmap")
fig.show()

corr_table = corr.unstack().sort_values(ascending=False).drop_duplicates().head(20)
corr_table
```


## QUESTION|TASK 2

__Build a classification model labeling houses as being built “before 1980” or “during or after 1980”. Your goal is to reach or exceed 90% accuracy. Explain your final model choice (algorithm, tuning parameters, etc) and describe what other models you tried.__


```{python}
#| label: Q2

dwellings_ml_encoded = pd.get_dummies(dwellings_ml)

# Separate features and target variable
X_pred = dwellings_ml_encoded.drop(columns=['before1980'])
y_pred = dwellings_ml_encoded['before1980']

X_train, X_test, y_train, y_test = train_test_split(X_pred, y_pred, test_size=0.35, random_state=76)
```


```{python}
#| label: Q2-2

clf = tree.DecisionTreeClassifier()
clf = clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

print(metrics.classification_report(y_test, y_pred, target_names=['during or after 1980', 'before 1980']))

```


## QUESTION|TASK 3

__Justify your classification model by discussing the most important features selected by your model. This discussion should include a feature importance chart and a description of the features.__

```{python}
#| label: Q3
#| code-summary: Read and format data

if hasattr(clf, 'tree_'):
    df_features = pd.DataFrame({
        'f_names': X_train.columns, 
        'f_values': clf.feature_importances_
    }).sort_values('f_values', ascending=False)

    chart4 = px.bar(df_features.head(30),
        x='f_values', 
        y='f_names',
        title="Feature Importance"
    )

    chart4.update_layout(yaxis={'categoryorder':'total ascending'})
    chart4.show()
else:
    print("The model has not been properly fitted.")

```


## QUESTION|TASK 4

__Describe the quality of your classification model using 2-3 different evaluation metrics. You also need to explain how to interpret each of the evaluation metrics you use.__

_Based on the classification report, the quality of this model is acceptable. All metrics are above 80% and the accuracy is 90%. The model is better at predicting "before 1980" than "during or after 1980"._

__Precision:__ Precision is the ratio of correctly predicted positive observations to the total predicted positive observations. It answers the quetsion "of all the houses that were predicted to be built before 1980, how many were actually built before 1980?" This is 85% for "during or after 1980" and 93% for "before 1980". "Before 1980" has a higher precision.

__Recall:__ Recall is the ratio of correctly predicted positive observations to the all observations in actual class. It answers the question "of all the houses that were actually built before 1980, how many were predicted to be built before 1980?" This is 88% for "during or after 1980" and 91% for "before 1980". "Before 1980" has a higher recall.

__Accuracy:__ Accuracy is the most intuitive performance measure and it is simply a ratio of correctly predicted observation to the total observations. It answers the question "how accurate is this model?" It is the ratio of the number of correct predictions to the total number of predictions. The accuracy of this model is 90%.